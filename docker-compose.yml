version: '3.9'
services:
  frontend:
    container_name: app_web_match
    build: ./web
    ports:
      - 5173:5173
    working_dir: /app-frontend
    # Os `healthcheck` devem garantir que a aplicação
    # está operacional, antes de liberar o container
    depends_on:
      backend:
        condition: service_healthy
    volumes: 
      - ./web/src:/app-frontend/src
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:5173"]  # Caso utilize outra porta interna para o front, altere ela aqui também
      timeout: 10s
      retries: 5
  backend:
    container_name: app_api_match
    build: ./api 
    ports:
      - 3001:3001
    working_dir: /app-backend
    # Caso queira que o container esteja atualizado durante o desenvolvimento, sem que você precise ficar fazendo down e up dos containers, descomente as 3 linhas abaixo
    # command: dev 
    volumes: 
      - ./api/src:/app-backend/src
    depends_on:
      db:
        condition: service_healthy
    environment:
      - APP_PORT=3001
      - JWT_SECRET=jwt_secret
      # Os dados abaixo se referem ao container `db`
      # Dica: Relembre aqui da comunicação interna entre containers
      - DB_USER=root
      - DB_PASS=senha_mysql
      - DB_HOST=db
      - DB_PORT=3306
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3001"] # Caso utilize outra porta interna para o back, altere ela aqui também
      timeout: 10s 
      retries: 5
    restart: on-failure
  db:
    image: mysql:8.0.32 
    container_name: app_database_match 
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=senha_mysql 
    restart: 'always'
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"] # Deve aguardar o banco ficar operacional
      timeout: 10s
      retries: 5
    cap_add:
      - SYS_NICE # Deve omitir alertas menores